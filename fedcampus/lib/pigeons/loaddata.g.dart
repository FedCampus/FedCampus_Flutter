// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:io';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:fedcampus/utility/log.dart';
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class LoadDataApi {
  /// Constructor for [LoadDataApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  LoadDataApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<Map<List<List<double?>?>?, List<double?>?>> loaddata() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.pigeon_example_package.LoadDataApi.loaddata', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      var x = replyList[0] as Map<Object?, Object?>;

      Map<List<List<double>>, List<double>> xTrue = {};
      for (var entry in x.entries) {
        final value = entry.value as List<Object?>;
        final key = entry.key as List<Object?>;
        List<List<double>> twoDarrayTrue = List.empty(growable: true);
        for (var onedarray in key) {
          var x1 = (onedarray as List<Object?>);
          List<double> onedarrayList = List.empty(growable: true);
          for (final i in x1) {
            onedarrayList.add(i as double);
          }
          twoDarrayTrue.add(onedarrayList);
        }
        xTrue[twoDarrayTrue] = [value[0]! as double];
      }
      return xTrue;
    }
  }
}
