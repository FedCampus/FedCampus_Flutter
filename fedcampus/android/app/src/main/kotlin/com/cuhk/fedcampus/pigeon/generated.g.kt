// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class Data (
  val name: String,
  val value: Double,
  val startTime: Long,
  val endTime: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): Data {
      val name = list[0] as String
      val value = list[1] as Double
      val startTime = list[2].let { if (it is Int) it.toLong() else it as Long }
      val endTime = list[3].let { if (it is Int) it.toLong() else it as Long }
      return Data(name, value, startTime, endTime)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      name,
      value,
      startTime,
      endTime,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class LossAccuracy (
  val loss: Double,
  val accuracy: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): LossAccuracy {
      val loss = list[0] as Double
      val accuracy = list[1] as Double
      return LossAccuracy(loss, accuracy)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      loss,
      accuracy,
    )
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface AlarmApi {
  fun setAlarm(callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by AlarmApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `AlarmApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: AlarmApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.AlarmApi.setAlarm", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.setAlarm() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object DataApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Data.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Data -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface DataApi {
  fun getData(name: String, startTime: Long, endTime: Long, callback: (Result<List<Data>>) -> Unit)

  companion object {
    /** The codec used by DataApi. */
    val codec: MessageCodec<Any?> by lazy {
      DataApiCodec
    }
    /** Sets up an instance of `DataApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: DataApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.DataApi.getData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val nameArg = args[0] as String
            val startTimeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val endTimeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            api.getData(nameArg, startTimeArg, endTimeArg) { result: Result<List<Data>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface HuaweiAuthApi {
  fun getAuthenticate(callback: (Result<Boolean>) -> Unit)
  fun cancelAuthenticate(callback: (Result<Boolean>) -> Unit)

  companion object {
    /** The codec used by HuaweiAuthApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `HuaweiAuthApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: HuaweiAuthApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.HuaweiAuthApi.getAuthenticate", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getAuthenticate() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.HuaweiAuthApi.cancelAuthenticate", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.cancelAuthenticate() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object LoadDataApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Data.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LossAccuracy.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is Data -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is LossAccuracy -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface LoadDataApi {
  fun loaddata(dataList: List<Data>, startTime: Long, endTime: Long, callback: (Result<Map<Any?, Any?>>) -> Unit)

  companion object {
    /** The codec used by LoadDataApi. */
    val codec: MessageCodec<Any?> by lazy {
      LoadDataApiCodec
    }
    /** Sets up an instance of `LoadDataApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: LoadDataApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.LoadDataApi.loaddata", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataListArg = args[0] as List<Data>
            val startTimeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val endTimeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            api.loaddata(dataListArg, startTimeArg, endTimeArg) { result: Result<Map<Any?, Any?>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object TrainFedmcrnnCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          LossAccuracy.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is LossAccuracy -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface TrainFedmcrnn {
  fun initialize(modelDir: String, layersSizes: List<Long>, callback: (Result<Unit>) -> Unit)
  fun loadData(data: Map<List<List<Double>>, List<Double>>, callback: (Result<Unit>) -> Unit)
  fun getParameters(callback: (Result<List<ByteArray>>) -> Unit)
  fun updateParameters(parameters: List<ByteArray>, callback: (Result<Unit>) -> Unit)
  fun ready(): Boolean
  fun fit(epochs: Long, batchSize: Long, callback: (Result<Unit>) -> Unit)
  fun trainingSize(): Long
  fun testSize(): Long
  fun evaluate(callback: (Result<LossAccuracy>) -> Unit)

  companion object {
    /** The codec used by TrainFedmcrnn. */
    val codec: MessageCodec<Any?> by lazy {
      TrainFedmcrnnCodec
    }
    /** Sets up an instance of `TrainFedmcrnn` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: TrainFedmcrnn?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.TrainFedmcrnn.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modelDirArg = args[0] as String
            val layersSizesArg = args[1] as List<Long>
            api.initialize(modelDirArg, layersSizesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.TrainFedmcrnn.loadData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as Map<List<List<Double>>, List<Double>>
            api.loadData(dataArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.TrainFedmcrnn.getParameters", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getParameters() { result: Result<List<ByteArray>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.TrainFedmcrnn.updateParameters", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val parametersArg = args[0] as List<ByteArray>
            api.updateParameters(parametersArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.TrainFedmcrnn.ready", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.ready())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.TrainFedmcrnn.fit", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val epochsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val batchSizeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.fit(epochsArg, batchSizeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.TrainFedmcrnn.trainingSize", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.trainingSize())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.TrainFedmcrnn.testSize", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.testSize())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.fedcampus.TrainFedmcrnn.evaluate", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.evaluate() { result: Result<LossAccuracy> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
