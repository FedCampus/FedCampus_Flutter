// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Data {
    private @NonNull String name;

    public @NonNull String getName() {
      return name;
    }

    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    private @NonNull Double value;

    public @NonNull Double getValue() {
      return value;
    }

    public void setValue(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    private @NonNull Long startTime;

    public @NonNull Long getStartTime() {
      return startTime;
    }

    public void setStartTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"startTime\" is null.");
      }
      this.startTime = setterArg;
    }

    private @NonNull Long endTime;

    public @NonNull Long getEndTime() {
      return endTime;
    }

    public void setEndTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"endTime\" is null.");
      }
      this.endTime = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Data() {}

    public static final class Builder {

      private @Nullable String name;

      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable Double value;

      public @NonNull Builder setValue(@NonNull Double setterArg) {
        this.value = setterArg;
        return this;
      }

      private @Nullable Long startTime;

      public @NonNull Builder setStartTime(@NonNull Long setterArg) {
        this.startTime = setterArg;
        return this;
      }

      private @Nullable Long endTime;

      public @NonNull Builder setEndTime(@NonNull Long setterArg) {
        this.endTime = setterArg;
        return this;
      }

      public @NonNull Data build() {
        Data pigeonReturn = new Data();
        pigeonReturn.setName(name);
        pigeonReturn.setValue(value);
        pigeonReturn.setStartTime(startTime);
        pigeonReturn.setEndTime(endTime);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(name);
      toListResult.add(value);
      toListResult.add(startTime);
      toListResult.add(endTime);
      return toListResult;
    }

    static @NonNull Data fromList(@NonNull ArrayList<Object> list) {
      Data pigeonResult = new Data();
      Object name = list.get(0);
      pigeonResult.setName((String) name);
      Object value = list.get(1);
      pigeonResult.setValue((Double) value);
      Object startTime = list.get(2);
      pigeonResult.setStartTime((startTime == null) ? null : ((startTime instanceof Integer) ? (Integer) startTime : (Long) startTime));
      Object endTime = list.get(3);
      pigeonResult.setEndTime((endTime == null) ? null : ((endTime instanceof Integer) ? (Integer) endTime : (Long) endTime));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class DataApiCodec extends StandardMessageCodec {
    public static final DataApiCodec INSTANCE = new DataApiCodec();

    private DataApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Data.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Data) {
        stream.write(128);
        writeValue(stream, ((Data) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface DataApi {

    void getData(@NonNull String name, @NonNull Long startTime, @NonNull Long endTime, @NonNull Result<List<Data>> result);

    /** The codec used by DataApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return DataApiCodec.INSTANCE;
    }
    /**Sets up an instance of `DataApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable DataApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_example_package.DataApi.getData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String nameArg = (String) args.get(0);
                Number startTimeArg = (Number) args.get(1);
                Number endTimeArg = (Number) args.get(2);
                Result<List<Data>> resultCallback =
                    new Result<List<Data>>() {
                      public void success(List<Data> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getData(nameArg, (startTimeArg == null) ? null : startTimeArg.longValue(), (endTimeArg == null) ? null : endTimeArg.longValue(), resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
